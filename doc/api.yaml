openapi: 3.0.3
info:
  title: WASA HW
  description: |-
    This OpenAPI document describes the WASA HW 
    OpenAPI specifications.
  version: "1"
tags:
  - name: login
  - name: username
  - name: follower
  - name: ban
  - name: user photo
  - name: user stream
  - name: likes
  - name: comments
paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema: { $ref : "#/components/schemas/Username" }
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema: { $ref : "#/components/schemas/Identifier" }
  /users:
    put:
      tags: ["username"]
      summary: Sets the user name
      description: |-
        Change the actual user name to the one
        specified in the body and return a new
        identifier.
      operationId: setMyUserName
      requestBody:
        description: New user name
        content:
          application/json:
            schema: { $ref : "#/components/schemas/Username" }
        required: true
      responses:
        '201':
          description: Set user name action successful
          content:
            application/json:
              schema: { $ref : "#/components/schemas/Identifier" }
  /users/{userName}/followers:
    parameters:
      - in: path
        name: userName
        required: true
        schema:
          type: string
        description: Name of an user
        example: Maria
    put:
      tags: ["follower"]
      summary: Follow an user
      security:
        - BearerAuth: [] 
      description: |-
        The user identified in the authorization
        header will follow the user name 
        contained in path.
      operationId: followUser
      responses:
        '201':
          description: User follow action successful
          content:
            application/json:
              schema: { $ref : "#/components/schemas/Message" }
              example: "The action was successful"
        '404': 
          description: User not found
          content:
            application/json:
              schema: { $ref : "#/components/schemas/Error" }
              example: "The user could not be found"
    delete:
      tags: ["follower"]
      summary: Unfollow an user
      description: |- 
        The user contained in the path
        will be unfollowed by the 
        active user contained in the 
        authorization header.
      operationId: unfollowUser
      responses: 
        '204': { description: User unfollowed successfully }
  /users/{userName}/banned:
    parameters:
      - in: path
        name: userName
        required: true
        schema:
          type: string
        description: Name of an user
        example: Maria
    put:
      tags: ["ban"]
      summary: Ban an user
      security:
        - BearerAuth: [] 
      description: |-
        The user contained in the body
        will be banned only if the userID
        contained in the authorization header
        identifies the user name in the path
      operationId: banUser
      responses: 
        '200': 
          description: User banned successfully
          content:
            application/json:
              schema: { $ref : "#/components/schemas/Message" }
              example: "User banned successfully"

        '403': 
          description: This action is forbidden
          content:
            application/json:
              schema: { $ref : "#/components/schemas/Error" }
              example: "You are not allowed to do that"
    delete:
      tags: ["ban"]
      summary: Unban an user
      security:
        - BearerAuth: [] 
      description: |-
        The user contained in the body
        will be unbanned only if the userID
        contained in the authorization header
        identifies the user name in the path
      operationId: unbanUser
      responses: 
        '204': { description: User unbanned successfully }
        '403': { description: This action is forbidden }
  
  /users/{userName}/photos:
    parameters:
      - in: path
        name: userName
        required: true
        schema:
          type: string
        description: Name of an user
        example: Maria
    get:
      tags: ["user photo"]
      summary: Get all photos of an user
      description: |-
        Get all the photos posted by the
        user specified in the path.
      operationId: getPhotos
      responses:
        '200':
          description: Get a list of photos
          content:
            application/json:
              schema: { $ref : "#/components/schemas/Photos" }
    post:
      tags: ["user photo"]
      summary: Upload a photo
      security:
        - BearerAuth: [] 
      description: |-
        Uploads a photo, date and time are calculated
        by the server when the request is made.
        Only the users by the ID specified in the header can
        upload a photo.
      operationId: uploadPhoto
      requestBody:
        description: Photo details
        content:
          multipart/form-data:
            schema: { $ref : "#/components/schemas/PhotoBin" }
        required: true
      responses:
        '201': { description: Photo upload action successful }
  /users/{userName}/stream:
    parameters:
      - in: path
        name: userName
        required: true
        schema:
          type: string
        description: Name of an user
        example: Maria
    get:
      tags: ["user stream"]
      summary: Get stream of content for a user
      description: |-
        Get the stream of content
        for the user name specified
        in the path.
      operationId: getMyStream
      responses: 
        '200':
          description: Stream GET action succesful
          content:
            application/json:
              schema: { $ref : "#/components/schemas/Photos" }
  /users/{userName}/photos/{photoId}:
    parameters:
      - in: path
        name: userName
        required: true
        schema:
          type: string
          pattern: 'ˆ.*?$'
          minLength: 3
          maxLength: 16
        description: Session ID of a user
        example: Maria
      - in: path
        name: photoId
        required: true
        schema:
          type: integer
        description: Integer ID of the user's photo
        example: 1
    delete:
      tags: ["user photo"]
      summary: Delete a photo
      security:
        - BearerAuth: [] 
      description: |- 
        Delete a photo. Only if the ID contained in
        header identifies the user that posted the photo 
        by photoID the delete is successful.
      operationId: deletePhoto
      responses:
        '204': { description: Photo deleted successfully }
        '403': { description: This action is forbidden }
  /users/{userName}/photos/{photoId}/likes:
    parameters:
      - in: path
        name: userName
        required: true
        schema:
          type: string
          pattern: 'ˆ.*?$'
          minLength: 3
          maxLength: 16
        description: Session ID of a user
        example: Maria
      - in: path
        name: photoId
        required: true
        schema:
          type: integer
        description: Integer ID of the user's photo
        example: 1
    put:
      tags: ["likes"]
      summary: Likes a photo
      security:
        - BearerAuth: []
      description: |-
        The user identified by the header will
        like the photo specified by photoId in
        path of the user userName specified in
        path.
      operationId: likePhoto
      responses:
        '201': { description: Like added successfully }
        '404': { description: Photo not found }
    delete:
      tags: ["likes"]
      summary: Unlikes a photo
      security:
        - BearerAuth: []
      description: |-
        The user identified by the header will
        unlike the photo specified by photoId in
        path of the user userName specified in
        path.
      operationId: unlikePhoto
      responses:
        '204': { description: Like deleted successfully }
  /users/{userName}/photos/{photoId}/comments:
    parameters:
      - in: path
        name: userName
        required: true
        schema:
          type: string
          pattern: 'ˆ.*?$'
          minLength: 3
          maxLength: 16
        description: Session ID of a user
        example: Maria
      - in: path
        name: photoId
        required: true
        schema:
          type: integer
        description: Integer ID of the user's photo
        example: 1
    put:
      tags: ["comments"]
      summary: Likes a photo
      security:
        - BearerAuth: []
      description: |-
        The user identified by the header will
        comment the photo specified by photoId in
        path of the user userName specified in
        path.
      operationId: commentPhoto
      responses:
        '201': { description: Comment added successfully }
        '404': { description: Photo not found }
    delete:
      tags: ["comments"]
      summary: Unlikes a photo
      security:
        - BearerAuth: []
      description: |-
        If the ID contained in the header
        identifies the userName specified in
        the path and if photoId is valid and
        exists, the comment will be deleted
      operationId: uncommentPhoto
      responses:
        '204': { description: Comment deleted successfully }
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  schemas:
    Identifier:
      description: |-
        A schema that describes an
        identifier for an user
      type: object
      properties:
        identifier:
        # change here if you decide to use an integer
        # or any other type of identifier
          description: Unique ID of an user
          type: string
          example: "abcdef012345"
    Username:
      description: |-
        A schema that describes the
        name of the user.
      type: object
      properties:
        name:
          description: Name of an user
          type: string
          example: Maria
          pattern: 'ˆ.*?$'
          minLength: 3
          maxLength: 16
    Photos:
      description: |-
        A schema that describes
        a collection of photos
      type: object
      properties:
        photos:
          description: Array of photos in string format
          type: array
          items:
            type: string
    PhotoBin:
      description: |-
        A schema that describes a
        photo object converted in binary
      type: object
      properties:
        file:
          description: Binary file
          type: string
          format: binary
    Message:
      description: |-
        A schema that describes a 
        message object that describes 
        the status of the operation
      type: object
      properties:
        message:
          description: Message containing info about the operation
          type: string
    Error:
      description: |-
        A schema that describes a error 
        object that contains the
        error of the operation
      type: object
      properties:
        code:
          description: Error code
          type: string
        message:
          description: Error message
          type: string
        trace:
          description: Error trace
          type: string
      required:
        - code
        - message
      