openapi: 3.0.3
info:
  title: WASA HW
  description: |-
    This OpenAPI document describes the WASA HW 
    OpenAPI specifications.
  version: "1"
tags:
  - name: login
  - name: username
  - name: follower
  - name: ban
  - name: user photo
  - name: user profile
  - name: user stream
  - name: likes
  - name: comments
paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema: { $ref : "#/components/schemas/Username" }
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema: { $ref : "#/components/schemas/Identifier" }
              example: 
                identifier: "abcdef012345"
  /users/{userName}:
    parameters: 
      - $ref : "#/components/parameters/username"
    get:
      tags: ["user profile"]
      summary: Get the user profile
      security: 
        - BearerAuth: []
      description: |-
        Fetch all the required informations
        for a user profile page, including
        followers, following, how many photos
        have been uploaded. If user is banned
        by userName contained in path then
        the action is forbidden.
      operationId: getUserProfile
      responses:
        '200':
          description: User fetch action successful
          content:
            application/json:
              schema: { $ref : "#/components/schemas/Profile" }
              example:
                following: 15
                followers: 15
                photos:
                  - "/public/photo1.png"
                  - "/public/photo2.png"
                  - "/public/photo3.png"
        '404':
          description: User does not exist
          content:
            application/json:
              schema: { $ref : "#/components/schemas/ErrorContainer" }
              example:
                trace: AAAAAAAA-BBBB-CCCC-DDDD-FFFFFFFFFFFF
                errors:
                  - code: 'not_found'
                    message: 'The user was not found'
                    more_info: 'The user may not be present in the database'
    put:
      tags: ["username"]
      summary: Sets the user name
      security: 
        - BearerAuth: []
      description: |-
        Change the actual user name to the one
        specified in the body and return a new
        identifier.
      operationId: setMyUserName
      requestBody:
        description: New user name
        content:
          application/json:
            schema: { $ref : "#/components/schemas/Username" }
            example: 
              name: Maria
        required: true
      responses:
        '200':
          description: Set user name action successful
          content:
            application/json:
              schema: { $ref : "#/components/schemas/Identifier" }
              example: 
                identifier: "abcdef012345"
  /users/{userName}/followers/{followId}:
    parameters: 
      - $ref : "#/components/parameters/username"
      - $ref : "#/components/parameters/followId"
    put:
      tags: ["follower"]
      summary: Follow an user
      security:
        - BearerAuth: [] 
      description: |-
        The user that is userName in path
        will follow the user that is the
        followedId in path.
      operationId: followUser
      responses:
        '201':
          description: User follow action successful
          content:
            application/json:
              schema: { $ref : "#/components/schemas/Message" }
              example: { message: "The action was successful" }
        '404': 
          description: User not found
          content:
            application/json:
              schema: { $ref : "#/components/schemas/ErrorContainer" }
              example:
                trace: AAAAAAAA-BBBB-CCCC-DDDD-FFFFFFFFFFFF
                errors:
                  - code: 'not_found'
                    message: 'The user was not found'
                    more_info: 'The user may not be present in the database'
    delete:
      tags: ["follower"]
      summary: Unfollow an user
      security: 
        - BearerAuth: []
      description: |- 
        The user contained in the path
        will be unfollowed by the 
        active user contained in the 
        authorization header.
      operationId: unfollowUser
      responses: 
        '204': { description: User unfollowed successfully }
  /users/{userName}/banned/{banId}:
    parameters: 
      - $ref : "#/components/parameters/username"
      - $ref : "#/components/parameters/banId"
    put:
      tags: ["ban"]
      summary: Ban an user
      security:
        - BearerAuth: [] 
      description: |-
        The user contained in the body
        will be banned only if the userID
        contained in the authorization header
        identifies the user name in the path
      operationId: banUser
      responses: 
        '201': 
          description: User ban action successful
          content:
            application/json:
              schema: { $ref : "#/components/schemas/Message" }
              example: { message: "User banned successfully" }
        '403': 
          description: User ban action forbidden
          content:
            application/json:
              schema: { $ref : "#/components/schemas/ErrorContainer" }
              example:
                trace: AAAAAAAA-BBBB-CCCC-DDDD-FFFFFFFFFFFF
                errors:
                  - code: 'forbidden'
                    message: 'You are not allowed to do that'
                    more_info: 'You do not have permissions.'
    delete:
      tags: ["ban"]
      summary: Unban an user
      security:
        - BearerAuth: [] 
      description: |-
        The user contained in the body
        will be unbanned only if the userID
        contained in the authorization header
        identifies the user name in the path
      operationId: unbanUser
      responses: 
        '204': { description: User unbanned successfully }
        '403': 
          description: This action is forbidden
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorContainer" }
              example:
                trace: AAAAAAAA-BBBB-CCCC-DDDD-FFFFFFFFFFFF
                errors:
                  - code: 'forbidden'
                    message: 'You are not allowed to do that'
                    more_info: 'You do not have permissions.'
  /users/{userName}/stream:
    parameters: 
      - $ref : "#/components/parameters/username"
    get:
      tags: ["user stream"]
      summary: Get stream of content for a user
      security: 
        - BearerAuth: []
      description: |-
        Get the stream of content
        for the user name specified
        in the path.
      operationId: getMyStream
      
      responses: 
        '200':
          description: Stream GET action succesful
          content:
            application/json:
              schema: { $ref : "#/components/schemas/Photos" }
              example:
                photos:
                  - photo_id: 1
                    author_id: "Sfera99"
                    date: 2023-09-24T17:23:34Z
                  - photo_id: 2
                    author_id: "Gue98"
                    date: 2023-09-24T17:23:34Z
  /users/{userName}/photos:
    parameters: 
      - $ref : "#/components/parameters/username"
    get:
      tags: ["user photo"]
      summary: Get all photos of an user
      description: |-
        Get all the photos posted by the
        user specified in the path.
      operationId: getPhotos
      responses:
        '200':
          description: Get a list of photos
          content:
            application/json:
              schema: { $ref : "#/components/schemas/Photos" }
              example:
                photos:
                  - photo_id: 1
                    author_id: "Sfera99"
                    date: 2023-09-24T17:23:34Z
                  - photo_id: 2
                    author_id: "Gue98"
                    date: 2023-09-24T17:23:34Z
    post:
      tags: ["user photo"]
      summary: Upload a photo
      security:
        - BearerAuth: [] 
      description: |-
        Uploads a photo, date and time are calculated
        by the server when the request is made.
        Only the users by the ID specified in the header can
        upload a photo.
      operationId: uploadPhoto
      requestBody:
        description: Photo details
        content:
          multipart/form-data:
            schema: { $ref : "#/components/schemas/PhotoBin" }
        required: true
      responses:
        '201': 
          description: Photo upload action successful
          content:
            application/json:
              schema: { $ref : "#/components/schemas/Message" }
              example: { message: "Photo uploaded successfully" }
  /users/{userName}/photos/{photoId}:
    parameters: 
      - $ref : "#/components/parameters/username"
      - in: path
        name: photoId
        required: true
        schema:
          type: integer
        description: Integer ID of the user's photo
        example: 1
    delete:
      tags: ["user photo"]
      summary: Delete a photo
      security:
        - BearerAuth: [] 
      description: |- 
        Delete a photo. Only if the ID contained in
        header identifies the user that posted the photo 
        by photoID the delete is successful.
      operationId: deletePhoto
      responses:
        '204': { description: Photo deleted successfully }
        '400': 
          description: User not found
          content:
            application/json:
              schema: { $ref : "#/components/schemas/ErrorContainer" }
              example:
                trace: AAAAAAAA-BBBB-CCCC-DDDD-FFFFFFFFFFFF
                errors:
                  - code: 'bad_request'
                    message: 'The user was not found'
                    more_info: 'The user may not be present in the database'
        '403': 
          description: Photo delete action forbidden
          content:
            application/json:
              schema: { $ref : "#/components/schemas/ErrorContainer" }
              example:
                trace: AAAAAAAA-BBBB-CCCC-DDDD-FFFFFFFFFFFF
                errors:
                  - code: 'forbidden'
                    message: 'You are not allowed to do that'
                    more_info: 'You do not have permissions.'
        '404': 
          description: Photo not found
          content:
            application/json:
              schema: { $ref : "#/components/schemas/ErrorContainer" }
              example:
                trace: AAAAAAAA-BBBB-CCCC-DDDD-FFFFFFFFFFFF
                errors:
                  - code: 'not_found'
                    message: 'The photo was not found'
                    more_info: 'The photo may not be present in the database'
  # /users/{userName}/photos/{photoId}/likes:
  #   parameters:
  #     - in: path
  #       name: userName
  #       required: true
  #       schema:
  #         type: string
  #         pattern: 'ˆ.*?$'
  #         minLength: 3
  #         maxLength: 16
  #       description: Session ID of a user
  #       example: Maria
  #     - in: path
  #       name: photoId
  #       required: true
  #       schema:
  #         type: integer
  #       description: Integer ID of the user's photo
  #       example: 1
  /users/{userName}/photos/{photoId}/likes/{likeId}:
    parameters: 
      - $ref : "#/components/parameters/username"
      - in: path
        name: photoId
        required: true
        schema:
          type: integer
        description: Integer ID of the user's photo
        example: 1
      - in: path
        name: likeId
        required: true
        schema:
          type: integer
        description: Integer ID of the user's like
        example: 1
    delete:
      tags: ["likes"]
      summary: Unlikes a photo
      security:
        - BearerAuth: []
      description: |-
        The user identified by the header will
        unlike the photo specified by photoId in
        path of the user userName specified in
        path.
      operationId: unlikePhoto
      responses:
        '204': { description: Like deleted successfully }
    put:
      tags: ["likes"]
      summary: Likes a photo
      security:
        - BearerAuth: []
      description: |-
        The user identified by the header will
        like the photo specified by photoId in
        path of the user userName specified in
        path.
      operationId: likePhoto
      responses:
        '201':
          description: Add like action successful
          content:
            application/json:
              schema: { $ref : "#/components/schemas/Message" }
              example: { message: "The action was successful" }
        '404': 
          description: Photo not found
          content:
            application/json:
              schema: { $ref : "#/components/schemas/ErrorContainer" }
              example:
                trace: AAAAAAAA-BBBB-CCCC-DDDD-FFFFFFFFFFFF
                errors:
                  - code: 'not_found'
                    message: 'The user was not found'
                    more_info: 'The user may not be present in the database'
    
  /users/{userName}/photos/{photoId}/comments:
    parameters: 
      - $ref : "#/components/parameters/username"
      - in: path
        name: photoId
        required: true
        schema:
          type: integer
        description: Integer ID of the user's photo
        example: 1
    post:
      tags: ["comments"]
      summary: Comments a photo
      security:
        - BearerAuth: []
      description: |-
        The user identified by the header will
        comment the photo specified by photoId in
        path of the user userName specified in
        path.
      operationId: commentPhoto
      responses:
        '201':
          description: User comment action successful
          content:
            application/json:
              schema: { $ref : "#/components/schemas/Message" }
              example: { message: "The action was successful" }
        '404': 
          description: Photo not found
          content:
            application/json:
              schema: { $ref : "#/components/schemas/ErrorContainer" }
              example:
                trace: AAAAAAAA-BBBB-CCCC-DDDD-FFFFFFFFFFFF
                errors:
                  - code: 'not_found'
                    message: 'The photo was not found'
                    more_info: 'The photo may not be present in the database'
  /users/{userName}/photos/{photoId}/comments/{commentId}:
    parameters: 
      - $ref : "#/components/parameters/username"
      - in: path
        name: photoId
        required: true
        schema:
          type: integer
        description: Integer ID of the user's photo
        example: 1
      - in: path
        name: commentId
        required: true
        schema:
          type: integer
        description: Integer ID of a comment
        example: 1
    delete:
      tags: ["comments"]
      summary: Uncomments a photo
      security:
        - BearerAuth: []
      description: |-
        If the ID contained in the header
        identifies the userName specified in
        the path and if photoId is valid and
        exists, the comment will be deleted
      operationId: uncommentPhoto
      responses:
        '204': { description: Comment deleted successfully }
      
components:
  parameters:
    username:
      in: path
      name: userName
      required: true
      schema:
        type: string
        pattern: 'ˆ.*?$'
        minLength: 3
        maxLength: 16
      description: Session ID of a user
      example: Maria
    followId: 
      in: path
      name: followId
      required: true
      schema:
        type: string
        minLength: 3
        maxLength: 16
        pattern: 'ˆ.*?$'
      description: Follow ID of an user
      example: "Mario66"
    banId:
      in: path
      name: banId
      required: true
      schema:
        type: string
        minLength: 3
        maxLength: 16
        pattern: 'ˆ.*?$'
      description: ID of an user
      example: "Yasuo99"


  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  schemas:
    Identifier:
      description: |-
        A schema that describes an
        identifier for an user
      type: object
      properties:
        identifier:
        # change here if you decide to use an integer
        # or any other type of identifier
          description: Unique ID of an user
          type: string
          example: "abcdef012345"
    Username:
      description: |-
        A schema that describes the
        name of the user.
      type: object
      properties:
        name:
          description: Name of an user
          type: string
          pattern: 'ˆ.*?$'
          example: Maria
          minLength: 3
          maxLength: 16
    Photos:
      description: |-
        A schema that describes
        a collection of photos
      type: object
      properties:
        photos:
          description: Array of photos in string format
          type: array
          minItems: 0
          maxItems: 100
          items:
            $ref : '#/components/schemas/Photo'
    PhotoBin:
      description: |-
        A schema that describes a
        photo object converted in binary
      type: object
      properties:
        file:
          description: Binary file
          type: string
          format: binary
          minLength: 0
          maxLength: 100
    Photo:
      description: |-
        A object that contains all the useful
        info of a photo object
      type: object
      properties: 
        photo_id:
          description: Photo unique ID
          type: integer
          example: 484
        author_id:
          $ref : '#/components/schemas/Identifier/properties/identifier'
        date:
          description: DateTime of the uploaded photo
          type: string
          format: date-time
          example: 2023-09-24T17:23:34Z
    Message:
      description: |-
        A schema that describes a 
        message object that describes 
        the status of the operation
      type: object
      properties:
        message:
          description: Message containing info about the operation
          type: string
          minLength: 0
          maxLength: 256
    ErrorContainer:
      description: 'An error response for an operation.'
      type: object
      properties:
        errors:
          type: array
          minItems: 0
          maxItems: 100
          description: 'The array of error entries associated with the error response'
          items:
            $ref: '#/components/schemas/Error'
        trace:
          description: 'The error trace information.'
          type: string
          format: uuid
    Error:
      description: An error response entry.
      type: object
      properties:
        code:
          description: The error code.
          type: string
          enum:
            - 'bad_request'
            - 'forbidden'
            - 'not_authorized'
            - 'not_found'
        message:
          description: The error message.
          type: string
        more_info:
          description: Additional info about the error.
          type: string
    Profile:
      description: Profile of an user
      type: object
      properties:
        following:
          description: An integer describing the following
          type: integer
        followers:
          description: An integer describing the followers
          type: integer
        photos:
          description: Array of photos in string format
          type: array
          minItems: 0
          maxItems: 100
          items:
            type: string
            pattern: 'ˆ.*?$'
